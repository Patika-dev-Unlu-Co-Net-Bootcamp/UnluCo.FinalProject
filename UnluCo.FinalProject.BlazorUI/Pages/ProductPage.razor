@page "/products/{id:int}"
@inherits ProductViewModel
@inject NavigationManager NavManager
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime
<h3>Product Page</h3>

@if (Product is null)
{
    <p>
        Loading...

    </p>
}
else
{

    <div class="row bg-light">
        <div class="col-7">
            <div class="col border-right" style=" display: inline-block;">
                <div class="col-sm-12 text-center">
                    @if (Product.UploadedFile is not null)
                    {
                        <img class="col mt-3" src="data:image;base64,@System.Convert.ToBase64String(Product.UploadedFile.FileContent)" asp-append-version="true" style="height:400px;width:600px">
                    }

                </div>

                <div class="card-body">
                    <div class="clearfix mb-3"> <span class="float-start badge rounded-pill .bg-info text-dark">Available: @Product.IsOfferable</span> </div>
                    <h5 class="card-title">@Product.Name</h5>
                    @if (@Product.Description.Length > 120)
                    {
                        <p class="text-body text-justify" style="max-width:180px">@Product.Description.Substring(0, 120)</p>
                    }
                    else
                    {
                        <p class="text-body text-justify" style="max-width:180px">@Product.Description</p>
                    }

                    <ul class="list-group list-group-flush mb-2">
                        <li class="list-group-item">Price: @Product.Price</li>
                        <li class="list-group-item">Color: @Product.Color.Name</li>
                        <li class="list-group-item">Category: @Product.Category.Title</li>
                        <li class="list-group-item">Brand: @Product.Brand.Name</li>
                    </ul>


                </div>
            </div>
        </div>

        <div class="col-4">
            @if (Product.Offers.Count > 0)
            {
            <div class="row text-center">
                <h4>Offers</h4>
            </div>
               
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Offer Id</th>
                            <th scope="col">Amout</th>
                            <th scope="col">Options</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Product.Offers)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Amount</td>
                                <td>
                                    <button @onclick="()=>DeleteOffer(item.Id)" class="btn btn-danger btn-sm mr-1">Delete</button>
                                    <button @onclick="()=>AcceptOffer(item.Id)" class="btn btn-primary btn-sm">Accept</button>
                                </td>
                            </tr>

                        }


                    </tbody>
                </table>
            }
        </div>


    </div>





}

@code {
    [Parameter]
    public int Id { get; set; }

    public ProductViewModel Product { get; set; }
    public DeleteOfferViewModel DeleteOfferModel { get; set; }
    public UpdateOfferActivityViewModel AcceptOfferModel { get; set; }

    HttpClient client = new HttpClient();


    protected override async Task OnInitializedAsync()
    {
        var product = await client.GetAsync($"http://localhost:19383/api/products/{Id}");
        Product = JsonConvert.DeserializeObject<ProductViewModel>(await product.Content.ReadAsStringAsync());
    }

    public async void DeleteOffer(int id)
    {
        DeleteOfferModel = new DeleteOfferViewModel() { Id = id };
        var request = new HttpRequestMessage();
        request.RequestUri = new Uri($"http://localhost:19383/api/Offers/{id}");
        request.Method = HttpMethod.Delete;

        request.Headers.Add("Accept", "*/*");


        var bodyString = System.Text.Json.JsonSerializer.Serialize(DeleteOfferModel);

        var content = new StringContent(bodyString, System.Text.Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        var responseMessage = await response.Content.ReadAsStringAsync();
        Response result = JsonConvert.DeserializeObject<Response>(responseMessage);
        if (result.Status == "Success")
        {
            await JsRuntime.InvokeVoidAsync("alert", result.Message);

        }
        var product = await client.GetAsync($"http://localhost:19383/api/products/{Id}");
        Product = JsonConvert.DeserializeObject<ProductViewModel>(await product.Content.ReadAsStringAsync());
        StateHasChanged();
    }

    public async void AcceptOffer(int id)
    {
        AcceptOfferModel = new UpdateOfferActivityViewModel { Id = id, IsActive = false, ProductId = Id };
        var request = new HttpRequestMessage();
        request.RequestUri = new Uri($"http://localhost:19383/api/Offers/{id}/Active");
        request.Method = HttpMethod.Put;

        request.Headers.Add("Accept", "*/*");


        var bodyString = System.Text.Json.JsonSerializer.Serialize(AcceptOfferModel);

        var content = new StringContent(bodyString, System.Text.Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        var responseMessage = await response.Content.ReadAsStringAsync();
        Response result = JsonConvert.DeserializeObject<Response>(responseMessage);
        if (result.Status == "Success")
        {
            await JsRuntime.InvokeVoidAsync("alert", result.Message);

        }
        var product = await client.GetAsync($"http://localhost:19383/api/products/{Id}");
        Product = JsonConvert.DeserializeObject<ProductViewModel>(await product.Content.ReadAsStringAsync());
        StateHasChanged();
    }
}



