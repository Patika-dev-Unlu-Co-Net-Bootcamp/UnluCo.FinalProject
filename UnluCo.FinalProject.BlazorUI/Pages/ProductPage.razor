@page "/products/{id:int}"
@inherits ProductViewModel
@inject NavigationManager NavManager
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime
<h3>Product Page</h3>

@if (Product is null)
{
    <p>
        Loading...

    </p>
}
else
{
    <div class="col">


        <div class="row bg-light">
            <div class="m-auto">
                @if (Product.UploadedFile is not null)
                {
                    <img class="col-12 mb-2" src="data:image;base64,@System.Convert.ToBase64String(Product.UploadedFile.FileContent)" asp-append-version="true" style="height:400px;width:400px">
                }
            </div>


        </div>
        <div class="row">
            <div class="col-12">
                <span class="col-1 m-1">Id: @Product.Id</span>
                <span class="col-3 m-1">Name: @Product.Name</span>

                <span class="col-2 m-1">Price: @Product.Price</span>
                <span class="col-2 m-1">Color: @Product.Color.Name</span>
                <span class="col-3 m-1">Category: @Product.Category.Title</span>
                <span class="col-3 m-1">Brand: @Product.Brand.Name</span>
                <span class="col-12 m-1">Description: @Product.Description</span>
            </div>
        </div>
        <hr class="bg-dark" />
        @if (Product.Offers.Count > 0)
        {
            <h4 class="row">Offers</h4>

            @foreach (var item in Product.Offers)
            {
                <div class="row bg-white">
                    <div class="col-2">Offer Id:@item.Id </div>
                    <div class="col-2">Amout: @item.Amount </div>
                    <button @onclick="()=>DeleteOffer(item.Id)" class="btn btn-danger btn-sm mr-1">Delete</button>
                    <button @onclick="()=>AcceptOffer(item.Id)" class="btn btn-primary btn-sm">Accept</button>
                </div>
                <hr class="bg-dark" />
            }

        }

    </div>

}

@code {
    [Parameter]
    public int Id { get; set; }

    public ProductViewModel Product { get; set; }
    public DeleteOfferViewModel DeleteOfferModel { get; set; }
    public UpdateOfferActivityViewModel AcceptOfferModel { get; set; }

    HttpClient client = new HttpClient();


    protected override async Task OnInitializedAsync()
    {
        var product = await client.GetAsync($"http://localhost:19383/api/products/{Id}");
        Product = JsonConvert.DeserializeObject<ProductViewModel>(await product.Content.ReadAsStringAsync());
    }

    public async void DeleteOffer(int id)
    {
        DeleteOfferModel = new DeleteOfferViewModel() { Id = id };
        var request = new HttpRequestMessage();
        request.RequestUri = new Uri($"http://localhost:19383/api/Offers/{id}");
        request.Method = HttpMethod.Delete;

        request.Headers.Add("Accept", "*/*");


        var bodyString = System.Text.Json.JsonSerializer.Serialize(DeleteOfferModel);

        var content = new StringContent(bodyString, System.Text.Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        var responseMessage = await response.Content.ReadAsStringAsync();

        NavManager.NavigateTo($"/products/{Id}");
    }

    public async void AcceptOffer(int id)
    {
        AcceptOfferModel = new UpdateOfferActivityViewModel { Id = id, IsActive = false, ProductId = Id };
        var request = new HttpRequestMessage();
        request.RequestUri = new Uri($"http://localhost:19383/api/Offers/{id}/Active");
        request.Method = HttpMethod.Put;

        request.Headers.Add("Accept", "*/*");


        var bodyString = System.Text.Json.JsonSerializer.Serialize(AcceptOfferModel);

        var content = new StringContent(bodyString, System.Text.Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        var responseMessage = await response.Content.ReadAsStringAsync();
        Response result = JsonConvert.DeserializeObject<Response>(responseMessage);
        if (result.Status == "Success")
        {
            await JsRuntime.InvokeVoidAsync("alert", result.Message);

        }
        NavManager.NavigateTo($"/products/{Id}");
    }
}

