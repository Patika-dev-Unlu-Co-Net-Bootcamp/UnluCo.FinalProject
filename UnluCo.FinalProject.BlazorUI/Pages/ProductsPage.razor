@page "/products"
@inherits ProductViewModel
@inject NavigationManager NavManager
@using UnluCo.FinalProject.BlazorUI.ViewModels;
@using Newtonsoft.Json
@using System.Net.Http.Headers;



<h3>Products</h3>

@if (Products is null)
{
    <p>
        Loading...

    </p>
}
else
{
    <button @onclick="() => NavigateToCreateProductPage()" class="btn btn-primary">Create a product</button>
    <div class="col">
        @foreach (var product in Products)
        {
            <div class="row bg-light mt-2">
                @if (product.UploadedFile is not null)
                {
                    <img class="col-2" src="data:image;base64,@System.Convert.ToBase64String(product.UploadedFile.FileContent)" asp-append-version="true" style="height:100px;width:100px">
                }
                <div class="col-10">
                    <div class="row">
                        <span class="col-1 m-1">Id: @product.Id</span>
                        <span class="col-3 m-1">Name: @product.Name</span>
                        <span class="col-2 m-1">Price: @product.Price</span>
                        <span class="col-2 m-1">Color: @product.Color.Name</span>
                        <span class="col-3 m-1">Category: @product.Category.Title</span>
                        <span class="col-3 m-1">Brand: @product.Brand.Name</span>
                        <button @onclick="() => NavigateToProductPage(product.Id)" class="btn btn-primary btn-sm">Detail</button>
                        <button  @onclick="() => NavigateToCreateOfferPage(product.Id)" class="btn btn-warning btn-sm">Offer</button>
                    </div>
                </div>

                @*<p class="col-2 m-1">User: @product.User.UserName</p>*@


            </div>
        }
    </div>
}

@code {

    public List<ProductViewModel> Products { get; set; }

    HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        var products = await client.GetAsync("http://localhost:19383/api/products");
        Products = JsonConvert.DeserializeObject<List<ProductViewModel>>(await products.Content.ReadAsStringAsync()).ToList();


    }
    public void NavigateToProductPage(int id)
    {
        NavManager.NavigateTo($"/products/{id}");
    }
    public void NavigateToCreateProductPage()
    {
        NavManager.NavigateTo($"/products/create");
    }
    public void NavigateToCreateOfferPage(int id)
    {
        NavManager.NavigateTo($"/products/{id}/offer");
    }

    public string ShowImage(UploadedFile uploadedFile)
    {

        //Convert byte arry to base64string
        string imreBase64Data = Convert.ToBase64String(uploadedFile.FileContent);
        string imgDataURL = $"data:image/jpg;base64,{imreBase64Data}";
        return imgDataURL;
    }

}

